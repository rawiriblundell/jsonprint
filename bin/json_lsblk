#!/bin/bash

# A simple demonstration of 'lsblk' with json output

# A simple aesthetic function to give another name for '.'
# shellcheck disable=SC1090
include() { . "${1}" || exit 1; }

include ../lib/jsonprint.sh

# We require the 'lsblk' command, obviously
json_require lsblk

# If we have a version of 'lsblk' that natively supports json output, use it
if lsblk -J >/dev/null 2>&1; then
  lsblk -J
  exit 0
fi

# Otherwise, we try to build the same output ourselves.
# We start by defining the functions that we need

# This function generates a list of children (i.e. partitions)
# for a given disk, so that we can loop over them
get_dev_children() {
  lsblk -npl -o NAME,TYPE "${1:?}" | awk '{if(!($2=="disk")) print $1}'
}

# This function generates a list of disks that we can loop over
get_disk_list() {
  lsblk -npl -o NAME,TYPE | awk '{if($2=="disk")print $1}'
}

# This function ensures we return details for a disk only
get_disk_info() {
  lsblk -n -l -o NAME,MAJ:MIN,RM,SIZE,RO,TYPE,MOUNTPOINT "${1:?}" | 
    awk '{if($6=="disk") print}'
}

# This function returns details for a partition only if given
# It will also return detail for a disk and all its children partitions
# You know, if you wanted to use it that way
get_part_info() {
  lsblk -n -l -o NAME,MAJ:MIN,RM,SIZE,RO,TYPE,MOUNTPOINT "${1:?}"
}

# We pipe get_[disk|part]_info() into this function which formats
# the input into our desired json structure
format_blk_info() {
  while read -r name majmin rm size ro type mountpoint; do
    json_str name "${name}"
    json_str_append "maj:min" "${majmin}"
    json_str_append rm "${rm}"
    json_str_append size "${size}"
    json_str_append ro "${ro}"
    json_str_append type "${type}"
    json_str_append mountpoint "${mountpoint}"
  done
}

json_open
  json_arr_open blockdevices
    disk_iter_count=0
    for disk in $(get_disk_list); do
      if (( disk_iter_count == 0 )); then
        json_obj_open
      else
        json_obj_append
      fi
        get_disk_info "${disk}" | format_blk_info
        json_comma
        json_arr_open children
          part_iter_count=0
          # If child count is 0, close the array immediately
          child_count=$(get_dev_children "${disk}" | grep -c .)
          if (( child_count == 0 )); then
            json_arr_close
          else
            for part in $(get_dev_children "${disk}"); do
              if (( part_iter_count == 0 )); then
                json_obj_open
                (( part_iter_count++ ))
              else
                json_obj_append
              fi
              get_part_info "${part}" | format_blk_info
            done
            json_obj_close
          fi
        json_arr_close
      done
    json_obj_close
  json_arr_close
json_close
